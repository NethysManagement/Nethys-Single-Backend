package com.steelezide.nethys.pojos;

import java.util.List;

import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Table;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.CascadeType;
import javax.persistence.Column;

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * An object that contains the data representing a Pathfinder 1st edition class.
 * Has a no-args and all args contsructor. 
 */
@Entity
@Table(name = "class")
@JsonIdentityInfo(
    generator = ObjectIdGenerators.PropertyGenerator.class,
    property = "id")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class PlayerClass {

    /**
     * ID auto-generated by the database used to reference a specific class.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private int id;

    /**
     * Denotes the name of this particular Pathfinder class.
     */
    @Column(name = "name")
    private String name;

    /**
     * A cast type can be divine, arcane, or none. In the case of none,
     * this class does not cast spells.
     */
    @Column(name = "castType")
    private String castType;

    /**
     * If true, this class must prepare their spells to utilize them. 
     */
    @Column(name = "prepared")
    private boolean prepared;

    /**
     * If true, this class must learn their spells to utilize them. 
     */
    @Column(name = "learned")
    private boolean learned;

    /**
     * Contains a list of spells this class can learn and/or prepare.
     */
    @ManyToMany(cascade = { CascadeType.ALL }, fetch = FetchType.LAZY )
    @JoinTable(
        name = "class_to_spell",
        joinColumns = { @JoinColumn (name = "class_id") },
        inverseJoinColumns = { @JoinColumn (name = "spell_id") }
    )
    private List<Spell> spellList;
}
